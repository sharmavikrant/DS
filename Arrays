1. Find subarray with given sum (non negative)

#include <stdio.h>

int main() {
    int arr[] = {15, 2, 4, 8, 9, 5, 10, 23};
    int n = sizeof(arr)/sizeof(arr[0]);
	int sum = 23;
	subArraySum(arr, n, sum);
	return 0;
}

int subArraySum(int arr[], int n, int sum)
{
    int curr_sum = arr[0];
    int start = 0, i;
    
    for(i=1;i<=n;i++)
    {
        while(curr_sum > sum && i-1 > start )
        {
            curr_sum = curr_sum - arr[start];
            start++;
        }
        
        if (curr_sum == sum)
        {
            printf ("Sum found between indexes %d and %d", start, i-1); 
            return 1;
        }
        
        if (i<n)
        {
            curr_sum = curr_sum + arr[i];
        }
    }    
    printf("No Sub Array Found");
    return 0;
}


O/p: Sum found between indexes 1 and 4
Time Complexity: O(n)

2. Largest Sum Contiguous Subarray [ Kadaneâ€™s algorithm]

int main()
{
	int arr[] = {-2, -3, 4, -1, -2, 1, 5, -3}
	int n = sizeof(arr)/sizeof(arr[0])
	int max_sum = maxSumArray(arr)
	return 0;
}

int maxSumArray(int arr[], int n)
{
	int curr_sum = 0, max_sum = 0;
	int start = 0, end = 0;
	for(i=0; i<n; i++)
	{
		curr_sum += arr[i]
		if max_sum < curr_sum {
			max_sum = curr_sum;
			start = s;
			end = i;
		}
		if curr_sum < 0 {
			start = s+1;
		}
	}
	 cout << "Maximum contiguous sum is "
        	<< max_sum << endl; 
    	 cout << "Starting index "<< start 
        	<< endl << "Ending index "<< end << endl; 
	
}

O/p:
Maximum contiguous sum is 7
Starting index 2
Ending index 6
