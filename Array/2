Largest Sum Contiguous Subarray [ Kadaneâ€™s algorithm]

int main()
{
	int arr[] = {-2, -3, 4, -1, -2, 1, 5, -3}
	int n = sizeof(arr)/sizeof(arr[0])
	int max_sum = maxSumArray(arr)
	return 0;
}

int maxSumArray(int arr[], int n)
{
	int curr_sum = 0, max_sum = 0;
	int start = 0, end = 0;
	for(i=0; i<n; i++)
	{
		curr_sum += arr[i]
		if max_sum < curr_sum {
			max_sum = curr_sum;
			start = s;
			end = i;
		}
		if curr_sum < 0 {
			start = s+1;
		}
	}
	 cout << "Maximum contiguous sum is "
        	<< max_sum << endl; 
    	 cout << "Starting index "<< start 
        	<< endl << "Ending index "<< end << endl; 
	
}

O/p:
Maximum contiguous sum is 7
Starting index 2
Ending index 6